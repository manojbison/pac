---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: pipelinerun-generic
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "pull_request"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "main"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: "[git-clone, golang-test]"

    # Use maven task from hub
    pipelinesascode.tekton.dev/task-1: "[maven]"

    # You can add more tasks in here to reuse, browse the one you like from here
    # https://hub.tekton.dev/
    # example:
    # pipelinesascode.tekton.dev/task-2: "[maven, buildah]"


    # How many runs we want to keep attached to this event
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "https://github.com/manojbison/pipeline"
  pipelineSpec:
    params:
      - name: repo_url
    workspaces:
      - name: source
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
          kind: ClusterTask
        workspaces:
          - name: output
            workspace: source
        params:
          - name: url
            value: $(params.repo_url)
      # Customize this task if you like, or just do a taskRef
      # to one of the hub task.
      - name: noop-task
        runAfter:
          - fetch-repository
        workspaces:
          - name: source
            workspace: source
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: noop-task
              image: registry.access.redhat.com/ubi9/ubi-micro
              workingDir: $(workspaces.source.path)
              script: |
                exit 0
      - name: test
        runAfter: 
          - noop-task
        taskRef:
          name: golang-test
        params:
          - name: package
            value: "github.com/manojbison/pipeline"
          - name: packages
            value: "./test -run ^TestTaskRun"
          - name: GOARCH
            value: "s390x"
          - name: flags
            value: "-v -count=1 -tags=e2e -timeout=20m"
        workspaces:
          - name: source
            workspace: source
      - name: unittest
        runAfter: 
          - test
              # we get bumped out when usingh the official image with docker.io
              # ratelimit so workaround this.
        image: registry.redhat.io/rhel9/go-toolset:1.17.7
        env:
          - name: GOCACHE
            value: $(workspaces.source.path)/go-build-cache/cache
          - name: GOMODCACHE
            value: $(workspaces.source.path)/go-build-cache/mod
         workingDir: $(workspaces.source.path)
         script: |
           #!/usr/bin/env bash
           set -eux
           export SYSTEM_NAMESPACE="tekton-pipelines"
           export TEST_RUNTIME_ARCH="s390x"
           go test -v -count=1 -tags=e2e -timeout=20m ./test
  workspaces:
  - name: source
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
